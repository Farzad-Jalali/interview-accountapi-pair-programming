// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLimitsID deletes limit
*/
func (a *Client) DeleteLimitsID(params *DeleteLimitsIDParams) (*DeleteLimitsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLimitsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLimitsID",
		Method:             "DELETE",
		PathPattern:        "/limits/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLimitsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLimitsIDNoContent), nil

}

/*
DeletePaymentdefaultsID deletes payment defaults
*/
func (a *Client) DeletePaymentdefaultsID(params *DeletePaymentdefaultsIDParams) (*DeletePaymentdefaultsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePaymentdefaultsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePaymentdefaultsID",
		Method:             "DELETE",
		PathPattern:        "/paymentdefaults/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePaymentdefaultsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePaymentdefaultsIDNoContent), nil

}

/*
GetBatches lists batches
*/
func (a *Client) GetBatches(params *GetBatchesParams) (*GetBatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBatches",
		Method:             "GET",
		PathPattern:        "/batches",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBatchesOK), nil

}

/*
GetBatchesID fetches batch
*/
func (a *Client) GetBatchesID(params *GetBatchesIDParams) (*GetBatchesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBatchesID",
		Method:             "GET",
		PathPattern:        "/batches/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBatchesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBatchesIDOK), nil

}

/*
GetBatchesIDFile fetches batch file
*/
func (a *Client) GetBatchesIDFile(params *GetBatchesIDFileParams, writer io.Writer) (*GetBatchesIDFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchesIDFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBatchesIDFile",
		Method:             "GET",
		PathPattern:        "/batches/{id}/file",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBatchesIDFileReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBatchesIDFileOK), nil

}

/*
GetLimits lists limits
*/
func (a *Client) GetLimits(params *GetLimitsParams) (*GetLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLimitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLimits",
		Method:             "GET",
		PathPattern:        "/limits",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLimitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLimitsOK), nil

}

/*
GetLimitsID fetches limit
*/
func (a *Client) GetLimitsID(params *GetLimitsIDParams) (*GetLimitsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLimitsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLimitsID",
		Method:             "GET",
		PathPattern:        "/limits/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLimitsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLimitsIDOK), nil

}

/*
GetPaymentdefaults lists default settings for payments
*/
func (a *Client) GetPaymentdefaults(params *GetPaymentdefaultsParams) (*GetPaymentdefaultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentdefaultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentdefaults",
		Method:             "GET",
		PathPattern:        "/paymentdefaults",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentdefaultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentdefaultsOK), nil

}

/*
GetPaymentdefaultsID fetches payment defaults
*/
func (a *Client) GetPaymentdefaultsID(params *GetPaymentdefaultsIDParams) (*GetPaymentdefaultsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentdefaultsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentdefaultsID",
		Method:             "GET",
		PathPattern:        "/paymentdefaults/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentdefaultsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentdefaultsIDOK), nil

}

/*
GetPayments lists payments
*/
func (a *Client) GetPayments(params *GetPaymentsParams) (*GetPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPayments",
		Method:             "GET",
		PathPattern:        "/payments",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsOK), nil

}

/*
GetPaymentsID fetches payment
*/
func (a *Client) GetPaymentsID(params *GetPaymentsIDParams) (*GetPaymentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsID",
		Method:             "GET",
		PathPattern:        "/payments/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDOK), nil

}

/*
GetPaymentsIDAdmissionsAdmissionID fetches admission
*/
func (a *Client) GetPaymentsIDAdmissionsAdmissionID(params *GetPaymentsIDAdmissionsAdmissionIDParams) (*GetPaymentsIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDAdmissionsAdmissionIDOK), nil

}

/*
GetPaymentsIDReturnsReturnID fetches return
*/
func (a *Client) GetPaymentsIDReturnsReturnID(params *GetPaymentsIDReturnsReturnIDParams) (*GetPaymentsIDReturnsReturnIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReturnsReturnIDOK), nil

}

/*
GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID fetches return admission
*/
func (a *Client) GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID(params *GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReturnsReturnIDAdmissionsAdmissionIDOK), nil

}

/*
GetPaymentsIDReturnsReturnIDReversalsReversalID fetches return reversal
*/
func (a *Client) GetPaymentsIDReturnsReturnIDReversalsReversalID(params *GetPaymentsIDReturnsReturnIDReversalsReversalIDParams) (*GetPaymentsIDReturnsReturnIDReversalsReversalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDReversalsReversalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDReversalsReversalID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals/{reversalId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDReversalsReversalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReturnsReturnIDReversalsReversalIDOK), nil

}

/*
GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID fetches return reversal admission
*/
func (a *Client) GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID(params *GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsAdmissionIDOK), nil

}

/*
GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID fetches return submission
*/
func (a *Client) GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID(params *GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams) (*GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReturnsReturnIDSubmissionsSubmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK), nil

}

/*
GetPaymentsIDReversalsReversalID fetches reversal
*/
func (a *Client) GetPaymentsIDReversalsReversalID(params *GetPaymentsIDReversalsReversalIDParams) (*GetPaymentsIDReversalsReversalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReversalsReversalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReversalsReversalID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/reversals/{reversalId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReversalsReversalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReversalsReversalIDOK), nil

}

/*
GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID fetches reversal admission
*/
func (a *Client) GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID(params *GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDParams) (*GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReversalsReversalIDAdmissionsAdmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReversalsReversalIDAdmissionsAdmissionIDOK), nil

}

/*
GetPaymentsIDReversalsReversalIDSubmissionsSubmissionID fetches reversal submission
*/
func (a *Client) GetPaymentsIDReversalsReversalIDSubmissionsSubmissionID(params *GetPaymentsIDReversalsReversalIDSubmissionsSubmissionIDParams) (*GetPaymentsIDReversalsReversalIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDReversalsReversalIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDReversalsReversalIDSubmissionsSubmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDReversalsReversalIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDReversalsReversalIDSubmissionsSubmissionIDOK), nil

}

/*
GetPaymentsIDSubmissionsSubmissionID fetches submission
*/
func (a *Client) GetPaymentsIDSubmissionsSubmissionID(params *GetPaymentsIDSubmissionsSubmissionIDParams) (*GetPaymentsIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDSubmissionsSubmissionID",
		Method:             "GET",
		PathPattern:        "/payments/{id}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDSubmissionsSubmissionIDOK), nil

}

/*
GetPaymentsIDSubmissionsSubmissionIDValidations gets payment submission validations
*/
func (a *Client) GetPaymentsIDSubmissionsSubmissionIDValidations(params *GetPaymentsIDSubmissionsSubmissionIDValidationsParams) (*GetPaymentsIDSubmissionsSubmissionIDValidationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsIDSubmissionsSubmissionIDValidationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPaymentsIDSubmissionsSubmissionIDValidations",
		Method:             "GET",
		PathPattern:        "/payments/{id}/submissions/{submissionId}/validations",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentsIDSubmissionsSubmissionIDValidationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPaymentsIDSubmissionsSubmissionIDValidationsOK), nil

}

/*
GetPositions lists positions
*/
func (a *Client) GetPositions(params *GetPositionsParams) (*GetPositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPositions",
		Method:             "GET",
		PathPattern:        "/positions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPositionsOK), nil

}

/*
PatchLimitsID amends limit
*/
func (a *Client) PatchLimitsID(params *PatchLimitsIDParams) (*PatchLimitsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLimitsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLimitsID",
		Method:             "PATCH",
		PathPattern:        "/limits/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLimitsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchLimitsIDOK), nil

}

/*
PatchPaymentdefaultsID updates payment defaults
*/
func (a *Client) PatchPaymentdefaultsID(params *PatchPaymentdefaultsIDParams) (*PatchPaymentdefaultsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentdefaultsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentdefaultsID",
		Method:             "PATCH",
		PathPattern:        "/paymentdefaults/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentdefaultsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPaymentdefaultsIDOK), nil

}

/*
PatchPaymentsID amends or delete payment
*/
func (a *Client) PatchPaymentsID(params *PatchPaymentsIDParams) (*PatchPaymentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentsID",
		Method:             "PATCH",
		PathPattern:        "/payments/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPaymentsIDOK), nil

}

/*
PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID updates return submission
*/
func (a *Client) PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID(params *PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams) (*PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionID",
		Method:             "PATCH",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPaymentsIDReturnsReturnIDSubmissionsSubmissionIDOK), nil

}

/*
PatchPaymentsIDReversalsReversalIDSubmissionsSubmissionID updates reversal submission
*/
func (a *Client) PatchPaymentsIDReversalsReversalIDSubmissionsSubmissionID(params *PatchPaymentsIDReversalsReversalIDSubmissionsSubmissionIDParams) (*PatchPaymentsIDReversalsReversalIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentsIDReversalsReversalIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentsIDReversalsReversalIDSubmissionsSubmissionID",
		Method:             "PATCH",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentsIDReversalsReversalIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPaymentsIDReversalsReversalIDSubmissionsSubmissionIDOK), nil

}

/*
PatchPaymentsIDSubmissionsSubmissionID updates submission
*/
func (a *Client) PatchPaymentsIDSubmissionsSubmissionID(params *PatchPaymentsIDSubmissionsSubmissionIDParams) (*PatchPaymentsIDSubmissionsSubmissionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentsIDSubmissionsSubmissionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentsIDSubmissionsSubmissionID",
		Method:             "PATCH",
		PathPattern:        "/payments/{id}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentsIDSubmissionsSubmissionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPaymentsIDSubmissionsSubmissionIDOK), nil

}

/*
PostBatches creates payment batch
*/
func (a *Client) PostBatches(params *PostBatchesParams) (*PostBatchesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBatches",
		Method:             "POST",
		PathPattern:        "/batches",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/vnd.form3+bacs18", "application/vnd.form3+iso20022", "application/vnd.form3+swift"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBatchesCreated), nil

}

/*
PostLimits creates a limit
*/
func (a *Client) PostLimits(params *PostLimitsParams) (*PostLimitsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLimitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLimits",
		Method:             "POST",
		PathPattern:        "/limits",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLimitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLimitsCreated), nil

}

/*
PostPaymentdefaults creates the default settings for a payment
*/
func (a *Client) PostPaymentdefaults(params *PostPaymentdefaultsParams) (*PostPaymentdefaultsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentdefaultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentdefaults",
		Method:             "POST",
		PathPattern:        "/paymentdefaults",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentdefaultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentdefaultsCreated), nil

}

/*
PostPayments creates payment
*/
func (a *Client) PostPayments(params *PostPaymentsParams) (*PostPaymentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPayments",
		Method:             "POST",
		PathPattern:        "/payments",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsCreated), nil

}

/*
PostPaymentsIDAdmissions creates admission
*/
func (a *Client) PostPaymentsIDAdmissions(params *PostPaymentsIDAdmissionsParams) (*PostPaymentsIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/admissions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDAdmissionsCreated), nil

}

/*
PostPaymentsIDReturns creates return
*/
func (a *Client) PostPaymentsIDReturns(params *PostPaymentsIDReturnsParams) (*PostPaymentsIDReturnsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturns",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReturnsCreated), nil

}

/*
PostPaymentsIDReturnsReturnIDAdmissions creates return admission
*/
func (a *Client) PostPaymentsIDReturnsReturnIDAdmissions(params *PostPaymentsIDReturnsReturnIDAdmissionsParams) (*PostPaymentsIDReturnsReturnIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/admissions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReturnsReturnIDAdmissionsCreated), nil

}

/*
PostPaymentsIDReturnsReturnIDReversals creates return reversal
*/
func (a *Client) PostPaymentsIDReturnsReturnIDReversals(params *PostPaymentsIDReturnsReturnIDReversalsParams) (*PostPaymentsIDReturnsReturnIDReversalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDReversalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDReversals",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDReversalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReturnsReturnIDReversalsCreated), nil

}

/*
PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions creates return reversal admission
*/
func (a *Client) PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions(params *PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsParams) (*PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReturnsReturnIDReversalsReversalIDAdmissionsCreated), nil

}

/*
PostPaymentsIDReturnsReturnIDSubmissions creates return submission
*/
func (a *Client) PostPaymentsIDReturnsReturnIDSubmissions(params *PostPaymentsIDReturnsReturnIDSubmissionsParams) (*PostPaymentsIDReturnsReturnIDSubmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDSubmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDSubmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDSubmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReturnsReturnIDSubmissionsCreated), nil

}

/*
PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations creates return submission validation
*/
func (a *Client) PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations(params *PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsParams) (*PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidations",
		Method:             "POST",
		PathPattern:        "/payments/{id}/returns/{returnId}/submissions/{returnSubmissionId}/validations",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReturnsReturnIDSubmissionsReturnSubmissionIDValidationsCreated), nil

}

/*
PostPaymentsIDReversals creates reversal
*/
func (a *Client) PostPaymentsIDReversals(params *PostPaymentsIDReversalsParams) (*PostPaymentsIDReversalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReversalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReversals",
		Method:             "POST",
		PathPattern:        "/payments/{id}/reversals",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReversalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReversalsCreated), nil

}

/*
PostPaymentsIDReversalsReversalIDAdmissions creates reversal admission
*/
func (a *Client) PostPaymentsIDReversalsReversalIDAdmissions(params *PostPaymentsIDReversalsReversalIDAdmissionsParams) (*PostPaymentsIDReversalsReversalIDAdmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReversalsReversalIDAdmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReversalsReversalIDAdmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/admissions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReversalsReversalIDAdmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReversalsReversalIDAdmissionsCreated), nil

}

/*
PostPaymentsIDReversalsReversalIDSubmissions creates reversal submission
*/
func (a *Client) PostPaymentsIDReversalsReversalIDSubmissions(params *PostPaymentsIDReversalsReversalIDSubmissionsParams) (*PostPaymentsIDReversalsReversalIDSubmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReversalsReversalIDSubmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReversalsReversalIDSubmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/submissions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnc.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReversalsReversalIDSubmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReversalsReversalIDSubmissionsCreated), nil

}

/*
PostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidations creates reversal submission validation
*/
func (a *Client) PostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidations(params *PostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidationsParams) (*PostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidations",
		Method:             "POST",
		PathPattern:        "/payments/{id}/reversals/{reversalId}/submissions/{submissionId}/validations",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDReversalsReversalIDSubmissionsSubmissionIDValidationsCreated), nil

}

/*
PostPaymentsIDSubmissions creates submission
*/
func (a *Client) PostPaymentsIDSubmissions(params *PostPaymentsIDSubmissionsParams) (*PostPaymentsIDSubmissionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDSubmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDSubmissions",
		Method:             "POST",
		PathPattern:        "/payments/{id}/submissions",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDSubmissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDSubmissionsCreated), nil

}

/*
PostPaymentsIDSubmissionsSubmissionIDValidations creates payment submission validation
*/
func (a *Client) PostPaymentsIDSubmissionsSubmissionIDValidations(params *PostPaymentsIDSubmissionsSubmissionIDValidationsParams) (*PostPaymentsIDSubmissionsSubmissionIDValidationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPaymentsIDSubmissionsSubmissionIDValidationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPaymentsIDSubmissionsSubmissionIDValidations",
		Method:             "POST",
		PathPattern:        "/payments/{id}/submissions/{submissionId}/validations",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPaymentsIDSubmissionsSubmissionIDValidationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPaymentsIDSubmissionsSubmissionIDValidationsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
