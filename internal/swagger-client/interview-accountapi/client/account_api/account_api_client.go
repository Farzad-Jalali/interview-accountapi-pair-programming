/* #nosec */// Code generated by go-swagger; DO NOT EDIT.

package account_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteOrganisationAccountsID deletes organisation account
*/
func (a *Client) DeleteOrganisationAccountsID(params *DeleteOrganisationAccountsIDParams) (*DeleteOrganisationAccountsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganisationAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOrganisationAccountsID",
		Method:             "DELETE",
		PathPattern:        "/organisation/accounts/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganisationAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganisationAccountsIDNoContent), nil

}

/*
GetHealth gets health
*/
func (a *Client) GetHealth(params *GetHealthParams) (*GetHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHealth",
		Method:             "GET",
		PathPattern:        "/health",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHealthOK), nil

}

/*
GetOrganisationAccounts lists all organisation accounts
*/
func (a *Client) GetOrganisationAccounts(params *GetOrganisationAccountsParams) (*GetOrganisationAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganisationAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisationAccounts",
		Method:             "GET",
		PathPattern:        "/organisation/accounts",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganisationAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationAccountsOK), nil

}

/*
GetOrganisationAccountsID fetches organisation account
*/
func (a *Client) GetOrganisationAccountsID(params *GetOrganisationAccountsIDParams) (*GetOrganisationAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganisationAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisationAccountsID",
		Method:             "GET",
		PathPattern:        "/organisation/accounts/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganisationAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationAccountsIDOK), nil

}

/*
PostOrganisationAccounts creates an account
*/
func (a *Client) PostOrganisationAccounts(params *PostOrganisationAccountsParams) (*PostOrganisationAccountsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganisationAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrganisationAccounts",
		Method:             "POST",
		PathPattern:        "/organisation/accounts",
		ProducesMediaTypes: []string{"application/json; charset=utf-8", "application/vnd.api+json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrganisationAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrganisationAccountsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
